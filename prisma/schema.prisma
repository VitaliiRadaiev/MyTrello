// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model UserModel {
  id Int @id @default(autoincrement())
  email String @unique
  login String
  password String
  profilePhoto String?
  createdBoards BoardModel[]
  participantOfBoards ParticipantsModel[]
  messages CommentModel[]
  readMessages CommentReadStatusModel[]
}

model BoardModel {
  id Int @id @default(autoincrement())
  name String
  createdBy UserModel @relation(fields: [createdById], references: [id])
  createdById Int
  previewImage String?
  participants ParticipantsModel?
  columns ColumnModel[]
}

model ParticipantsModel {
  id Int @id @default(autoincrement())
  board BoardModel @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int @unique
  users UserModel[]
}

model ColumnModel {
  id        Int    @id @default(autoincrement())
  name      String
  board     BoardModel  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   Int
  order     Int
  cards     CardModel[]
}

model CardModel {
  cardId      Int      @id @default(autoincrement())
  title       String
  description String?
  column      ColumnModel  @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    Int
  order       Int
  images      CardImageModel[]
  comments    CommentModel[]
}

model CardImageModel {
  id          Int      @id @default(autoincrement())
  url String
  imageName String
  card CardModel @relation(fields: [cardId], references: [cardId], onDelete: Cascade)
  cardId Int
}

model CommentModel {
  id             Int      @id @default(autoincrement())
  text           String
  user           UserModel     @relation(fields: [userId], references: [id])
  userId         Int
  card           CardModel     @relation(fields: [cardId], references: [cardId], onDelete: Cascade)
  cardId         Int
  readStatuses   CommentReadStatusModel[]
}

model CommentReadStatusModel {
  id        Int      @id @default(autoincrement())
  userId    Int
  isRead    Boolean
  commentId Int
  comment   CommentModel @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      UserModel    @relation(fields: [userId], references: [id])
}